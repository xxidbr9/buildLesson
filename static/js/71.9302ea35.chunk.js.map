{"version":3,"sources":["pages/StudyPlaces/Places.jsx"],"names":["FilterPanel","styled","motion","div","StyledInput","Search","filterPanelVariants","visible","opacity","y","display","transition","staggerChildren","hidden","withI18n","connect","place","places","placesError","placeTypeOptions","placeTypes","map","value","pvid","label","isDifferentCountry","loading","fetchPlaceTypes","searchPlaces","fetchNearbyPlaces","i18n","userDetails","JSON","parse","localStorage","getItem","useState","type","keyword","filterValues","setFilterValues","useGeolocation","latitude","longitude","useInternational","countryCode","useEffect","country","lat","lng","userPvid","destroy","variants","animate","initial","delay","justify","lg","className","name","placeholder","_","onSearch","Number","allowClear","bold","level","marginBottom","content","subheader","options","onClick","length","centered","description","gutter","item","split","join","xs","key","style","to","css","data"],"mappings":"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","file":"static/js/71.9302ea35.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { Section, Heading, Loading, Empty } from \"components\"\nimport { Row, Col, Input, message } from \"antd\"\nimport { Link } from \"react-router-dom\"\nimport PlaceCard from \"./PlaceCard\"\nimport { connect } from \"react-redux\"\nimport { fetchPlaceTypes, searchPlaces, fetchNearbyPlaces } from \"store/actions/placesActions\"\nimport styled from \"styled-components\"\nimport { motion } from \"framer-motion\"\nimport CategoryList from \"components/common/CategoryList\"\nimport { country } from \"App\"\nimport { Trans, t } from \"@lingui/macro\"\nimport { withI18n } from \"@lingui/react\"\nimport { useGeolocation } from \"react-use\"\nimport useInternational from \"helpers/hooks/useInternational\"\n\nconst FilterPanel = styled(motion.div)`\n\tmargin-bottom: 1em;\n\tborder-radius: 5px;\n\tpadding: 1em 0;\n\t.right {\n\t\ttext-align: right;\n\t}\n`\n\nconst StyledInput = styled(Input.Search)`\n\t&& {\n\t\tmargin-bottom: 1em;\n\t\tdisplay: block;\n\t}\n`\n\nconst filterPanelVariants = {\n\tvisible: { opacity: 1, y: 0, display: \"block\", transition: { staggerChildren: 0.2 } },\n\thidden: { opacity: 0, y: -300, display: \"none\" }\n}\n\nfunction Places({ loading, fetchPlaceTypes, placeTypeOptions, searchPlaces, places, i18n, fetchNearbyPlaces }) {\n\tconst userDetails = JSON.parse(localStorage.getItem(\"userDetails\")) || {}\n\n\tconst [filterValues, setFilterValues] = useState({ type: 12, keyword: \"\" })\n\tconst { latitude = \"\", longitude = \"\" } = useGeolocation()\n\tconst { countryCode = \"\" } = useInternational()\n\n\tconst renderPlaces = () => {\n\t\tif (loading)\n\t\t\treturn (\n\t\t\t\t<Row>\n\t\t\t\t\t<Col lg={12}>\n\t\t\t\t\t\t<Loading />\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t)\n\n\t\tif (places.length === 0)\n\t\t\treturn (\n\t\t\t\t<Section centered>\n\t\t\t\t\t<Empty description={<Trans>Oops! No data found for now</Trans>} />\n\t\t\t\t</Section>\n\t\t\t)\n\n\t\treturn (\n\t\t\t<Row gutter={24}>\n\t\t\t\t{(places || []).map((item) => {\n\t\t\t\t\tconst name = item.name.split(\" \").join(\"-\")\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Col lg={6} xs={12} key={item.pvid} style={{ marginBottom: \"2em\" }}>\n\t\t\t\t\t\t\t<Link to={`/${country}/study_places/places/${name}--${item.pvid}`}>\n\t\t\t\t\t\t\t\t<PlaceCard css=\"cursor: pointer\" data={item} />\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</Row>\n\t\t)\n\t}\n\n\tconst handleSearch = (keyword) => {\n\t\tsetFilterValues({ ...filterValues, keyword })\n\t\tsearchPlaces(keyword, -1, country, Number(userDetails.pvid) || 0)\n\t}\n\n\tconst handleSelectType = (type) => {\n\t\tsetFilterValues({ ...filterValues, keyword: \"\", type })\n\t\tfetchNearbyPlaces({ country, lat: latitude, lng: longitude, userPvid: userDetails.pvid || 0 }, type, countryCode)\n\t}\n\n\tuseEffect(() => {\n\t\tfetchPlaceTypes(country)\n\n\t\tconst handleFetchNearby = () => {\n\t\t\tfetchNearbyPlaces({ country, lat: latitude, lng: longitude, userPvid: userDetails.pvid || 0 }, filterValues.type, countryCode)\n\t\t}\n\n\t\tif (!filterValues.keyword) handleFetchNearby()\n\n\t\treturn () => message.destroy()\n\t}, [\n\t\tfetchPlaceTypes,\n\t\tlatitude,\n\t\tlongitude,\n\t\tfetchNearbyPlaces,\n\t\tsearchPlaces,\n\t\tfilterValues.type,\n\t\tuserDetails.country,\n\t\tfilterValues.keyword,\n\t\tuserDetails.pvid,\n\t\tcountryCode\n\t])\n\n\treturn (\n\t\t<Section>\n\t\t\t<FilterPanel variants={filterPanelVariants} animate=\"visible\" initial=\"hidden\" transition={{ delay: 2 }}>\n\t\t\t\t<Row type=\"flex\" justify=\"space-between\">\n\t\t\t\t\t<Col lg={8} className=\"right\">\n\t\t\t\t\t\t<StyledInput\n\t\t\t\t\t\t\tname=\"keyword\"\n\t\t\t\t\t\t\tplaceholder={i18n._(t`E.g. Study places in Bandung`)}\n\t\t\t\t\t\t\tonSearch={handleSearch}\n\t\t\t\t\t\t\tallowClear\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</FilterPanel>{\" \"}\n\t\t\t<Heading\n\t\t\t\tbold\n\t\t\t\tlevel={4}\n\t\t\t\tmarginBottom=\"1em\"\n\t\t\t\tcontent={<Trans>Places to study</Trans>}\n\t\t\t\tsubheader={<Trans>School is not the only place to study. The list below proves it</Trans>}\n\t\t\t/>\n\t\t\t<CategoryList options={placeTypeOptions} onClick={handleSelectType} type={filterValues.type} />\n\t\t\t{renderPlaces()}\n\t\t</Section>\n\t)\n}\n\nconst mapState = ({ place }) => {\n\tconst places = place.placesError === 404 ? [] : place.places\n\tconst placeTypeOptions = (place.placeTypes || []).map(({ pvid, label }) => ({\n\t\t// value: userDetails.country === \"sg\" ? pvid : /\\s/.test(name) ? name.split(\" \").join(\"_\") : name,\n\t\tvalue: pvid,\n\t\tlabel\n\t}))\n\n\treturn {\n\t\tplaces,\n\t\tplaceTypeOptions,\n\t\tisDifferentCountry: place.isDifferentCountry,\n\t\tplacesError: place.placesError,\n\t\tloading: place.loading\n\t}\n}\n\nexport default withI18n()(connect(mapState, { fetchPlaceTypes, searchPlaces, fetchNearbyPlaces })(Places))\n"],"sourceRoot":""}