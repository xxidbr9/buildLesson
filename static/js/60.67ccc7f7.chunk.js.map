{"version":3,"sources":["pages/ListTransaction/index.jsx"],"names":["ListTransaction","axios","defaults","baseURL","process","headers","common","userDetails","JSON","parse","localStorage","getItem","currency","country","useState","lists","set_lists","current","pageSize","pagination","set_pagination","loading","set_loading","is_fetched","set_is_fetched","columns","title","dataIndex","sorter","a","b","amount","sortDirections","render","text","formatCurrency","width","useEffect","email","fetch","console","log","pgn","post","applicationName","limit","offset","data","list","map","l","key","id","total","className","gutter","dataSource","onChange","filters","extra"],"mappings":"qSAMe,SAASA,IACvBC,IAAMC,SAASC,QAAUC,uCACzBH,IAAMC,SAASG,QAAQC,OAAO,WAAaF,uCAE3C,IAAMG,EAAcC,KAAKC,MAAMC,aAAaC,QAAQ,iBAAmB,GACjEC,EAAmC,OAAxBL,EAAYM,QAAmB,MAAgC,OAAxBN,EAAYM,QAAmB,MAAQ,GALtD,EAOdC,mBAAS,IAPK,mBAOlCC,EAPkC,KAO3BC,EAP2B,OAQJF,mBAAS,CAC7CG,QAAS,EACTC,SAAU,KAV8B,mBAQlCC,EARkC,KAQtBC,EARsB,OAYVN,oBAAS,GAZC,mBAYlCO,EAZkC,KAYzBC,EAZyB,OAaJR,oBAAS,GAbL,mBAalCS,EAbkC,KAatBC,EAbsB,KAenCC,EAAU,CACf,CACCC,MAAO,aACPC,UAAW,MAKZ,CACCD,MAAO,cACPC,UAAW,eAEZ,CACCD,MAAO,SACPC,UAAW,SACXC,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,QAC/BC,eAAgB,CAAC,UAAW,UAC5BC,OAAQ,SAACC,GAAD,gBAAatB,EAAb,YAAyBuB,YAAeD,KAChDE,MAAO,KAER,CACCV,MAAO,aACPC,UAAW,aACXS,MAAO,KAER,CACCV,MAAO,aACPC,UAAW,aAEZ,CACCD,MAAO,SACPC,UAAW,wBAIbU,qBAAU,WACJd,IACAhB,EAAY+B,MACfC,KAEAC,QAAQC,IAAI,YACZnB,GAAY,IAEbE,GAAe,OAIjB,IAAMe,EAAK,uCAAG,4CAAAV,EAAA,6DAAOa,EAAP,+BAAavB,EAC1BG,GAAY,GADC,kBAKFrB,IAAM0C,KAAK,6BAA8B,CAClDL,MAAO/B,EAAY+B,MACnBM,gBAAiB,UACjBC,MAAOH,EAAIxB,SACX4B,QAASJ,EAAIzB,QAAU,GAAKyB,EAAIxB,WATrB,gBAIH6B,EAJG,EAIXA,KAAQA,KAOT/B,EAAU+B,EAAKC,KAAKC,KAAI,SAACC,GAAD,oBAAUC,IAAKD,EAAEE,IAAOF,OAChD9B,EAAe,eAAKD,EAAN,CAAkBkC,MAAON,EAAKM,SAZhC,kDAcZb,QAAQC,IAAI,cAAZ,MAdY,QAgBbnB,GAAY,GAhBC,0DAAH,qDA0BX,OAFAkB,QAAQC,IAAI1B,GAGX,kBAAC,IAAD,KACC,kBAAC,IAAD,CAASuC,UAAU,QAClB,uBAAKC,OAAQ,IACZ,2BACC,uBAAOlC,QAASA,EAASI,QAASA,EAAS+B,WAAYzC,EAAO0C,SAZlD,SAACtC,EAAYuC,EAAS9B,EAAQ+B,GAC9CvC,EAAeD,GACfoB,EAAMpB,IAUgFA,WAAYA","file":"static/js/60.67ccc7f7.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Section, Layout } from \"components\"\nimport { Row, Col, Table } from \"antd\"\nimport axios from \"axios\"\nimport { formatCurrency } from \"helpers\"\n\nexport default function ListTransaction() {\n\taxios.defaults.baseURL = process.env.REACT_APP_PAYMENT_URL\n\taxios.defaults.headers.common[\"api-key\"] = process.env.REACT_APP_PAYMENT_API_KEY\n\n\tconst userDetails = JSON.parse(localStorage.getItem(\"userDetails\")) || {}\n\tconst currency = userDetails.country === \"sg\" ? \"SGD\" : userDetails.country === \"id\" ? \"IDR\" : \"\"\n\n\tconst [lists, set_lists] = useState([])\n\tconst [pagination, set_pagination] = useState({\n\t\tcurrent: 1,\n\t\tpageSize: 10,\n\t})\n\tconst [loading, set_loading] = useState(true)\n\tconst [is_fetched, set_is_fetched] = useState(false)\n\n\tconst columns = [\n\t\t{\n\t\t\ttitle: \"Payment ID\",\n\t\t\tdataIndex: \"id\",\n\t\t\t// sorter: (a, b) => a.id - b.id,\n\t\t\t// sortDirections: [\"descend\", \"ascend\"],\n\t\t\t// defaultSortOrder: \"descend\",\n\t\t},\n\t\t{\n\t\t\ttitle: \"Description\",\n\t\t\tdataIndex: \"description\",\n\t\t},\n\t\t{\n\t\t\ttitle: \"Amount\",\n\t\t\tdataIndex: \"amount\",\n\t\t\tsorter: (a, b) => a.amount - b.amount,\n\t\t\tsortDirections: [\"descend\", \"ascend\"],\n\t\t\trender: (text) => `${currency} ${formatCurrency(text)}`,\n\t\t\twidth: 150,\n\t\t},\n\t\t{\n\t\t\ttitle: \"Booking ID\",\n\t\t\tdataIndex: \"booking_id\",\n\t\t\twidth: 150,\n\t\t},\n\t\t{\n\t\t\ttitle: \"Created At\",\n\t\t\tdataIndex: \"createdAt\",\n\t\t},\n\t\t{\n\t\t\ttitle: \"Status\",\n\t\t\tdataIndex: \"status_payment.name\",\n\t\t},\n\t]\n\n\tuseEffect(() => {\n\t\tif (!is_fetched) {\n\t\t\tif (userDetails.email) {\n\t\t\t\tfetch()\n\t\t\t} else {\n\t\t\t\tconsole.log(\"not auth\")\n\t\t\t\tset_loading(false)\n\t\t\t}\n\t\t\tset_is_fetched(true)\n\t\t}\n\t})\n\n\tconst fetch = async (pgn = pagination) => {\n\t\tset_loading(true)\n\t\ttry {\n\t\t\tconst {\n\t\t\t\tdata: { data },\n\t\t\t} = await axios.post(\"/payments/list/transaction\", {\n\t\t\t\temail: userDetails.email,\n\t\t\t\tapplicationName: \"cudy-i3\",\n\t\t\t\tlimit: pgn.pageSize,\n\t\t\t\toffset: (pgn.current - 1) * pgn.pageSize,\n\t\t\t})\n\t\t\tset_lists(data.list.map((l) => ({ key: l.id, ...l })))\n\t\t\tset_pagination({ ...pagination, total: data.total })\n\t\t} catch (err) {\n\t\t\tconsole.log(\"fetch error\", err)\n\t\t}\n\t\tset_loading(false)\n\t}\n\n\tconst onChange = (pagination, filters, sorter, extra) => {\n\t\tset_pagination(pagination)\n\t\tfetch(pagination)\n\t}\n\n\tconsole.log(lists)\n\n\treturn (\n\t\t<Layout>\n\t\t\t<Section className=\"p2em\">\n\t\t\t\t<Row gutter={32}>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<Table loading={loading} columns={columns} dataSource={lists} onChange={onChange} pagination={pagination} />\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Section>\n\t\t</Layout>\n\t)\n}\n"],"sourceRoot":""}