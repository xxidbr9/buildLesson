{"version":3,"sources":["components/common/LessonVideo/TumbVideo.jsx","components/common/LessonVideo/LayoutLesson.jsx","components/common/LessonVideo/SectionLesson.jsx","components/common/LessonVideo/VideoPlayer.jsx","pages/LessonVideo/index.jsx","pages/LessonVideo/ListVideo.jsx","queries/lessonVideo/index.js"],"names":["Card","styled","Meta","TumbVideo","data","thumbnail","pvid","title","curriculumName","duration","subjectName","cover","alt","src","className","desc","Description","description","LayoutStyled","Content","ContentStyled","Header","Layout","children","justify","span","Section","VideoPlayer","videoId","opts","height","width","playerVars","autoplay","modestbranding","onReady","event","target","playVideo","cudyLesson","newClient","LessonVideo","console","log","localStorage","getItem","document","LessonContext","Provider","value","client","isSlice","gqlQuery","LIST_VIDEO_LESSON","listData","LIST_RECOMMENDED_FAVOURITE","header","subHeader","createContext","ListVideo","isEnd","props","useContext","country","useParams","location","useLocation","gqlOpts","variables","youtubeVideoId","curriculumPvid","parseInt","subjectPvid","useQuery","loading","linkTo","pathname","split","gutter","content","subheader","slice","map","video","to","style","gql","LIST_ANOTHER_VIDEO","DETAIL_VIDEO_LESSON"],"mappings":"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","file":"static/js/32.1e9decfa.chunk.js","sourcesContent":["import React from \"react\"\nimport { Card as CardAntd, Tooltip } from \"antd\"\nimport styled from \"styled-components\"\n\nconst Card = styled(CardAntd)`\n\t&:hover {\n\t\t${\"\" /* cursor:pointer; */}\n\t}\n`\n\nconst { Meta } = Card\n\nfunction TumbVideo({ data, ...props }) {\n\tconst { pvid, thumbnail, title, duration, curriculumName, subjectName } = data\n\treturn (\n\t\t<Card cover={<img alt={title} src={thumbnail} className=\"img-tumbnail\" />}>\n\t\t\t<Description desc={{ title, curriculumName, subjectName }} />\n\t\t</Card>\n\t)\n}\n\nexport default TumbVideo\n\nconst Description = ({ desc }) => {\n\tconst { title, curriculumName, subjectName } = desc\n\tconst description = (\n\t\t<div>\n\t\t\t<span className=\"curriculumName\">{curriculumName}</span> | <span className=\"subjectName\">{subjectName}</span>\n\t\t</div>\n\t)\n\treturn <Meta title={title} description={description} />\n}\n","import React from \"react\"\nimport { Layout as LayoutAntd, Row, Col } from \"antd\"\nimport styled from \"styled-components\"\n\nconst LayoutStyled = styled(LayoutAntd)`\n\n`\nconst { Content, Header } = LayoutStyled\nconst ContentStyled = styled(Content)`\n\tpadding: 0 100px;\n`\n\nfunction Layout({ children, ...props }) {\n\treturn (\n\t\t<LayoutStyled>\n\t\t\t<ContentStyled>\n\t\t\t\t<Row justify=\"center\">\n\t\t\t\t\t<Col span={24}>{children}</Col>\n\t\t\t\t</Row>\n\t\t\t</ContentStyled>\n\t\t</LayoutStyled>\n\t)\n}\n\nexport default Layout\n","import React from \"react\"\nimport { Row, Col } from \"antd\"\n\nfunction Section({ children }) {\n\treturn (\n\t\t<Row>\n\t\t\t<Col span={24}>{children}</Col>\n\t\t</Row>\n\t)\n}\n\nexport default Section\n","import React from 'react'\nimport Youtube from 'react-youtube';\n\nfunction VideoPlayer({videoId,...props}) {\n    const opts = {\n\t\theight: \"480\",\n\t\twidth: \"100%\",\n\t\tplayerVars: {\n\t\t\t// https://developers.google.com/youtube/player_parameters\n\t\t\tautoplay: 1,\n\t\t\tmodestbranding: 1\n\t\t}\n\t}\n\tconst onVideoReady = (event) => {\n\t\tevent.target.playVideo()\n\t}\n    return (\n        <Youtube videoId={videoId} opts={opts} onReady={onVideoReady} />\n    )\n}\n\nexport default VideoPlayer\n","import React, { createContext } from \"react\"\nimport { newClient } from \"helpers\"\n\nimport { Layout } from \"components/common/LessonVideo\"\nimport ListVideo from \"./ListVideo\"\n\nimport { LIST_VIDEO_LESSON, LIST_RECOMMENDED_FAVOURITE } from \"queries/lessonVideo\"\n\nconst cudyLesson = newClient(\"cudy_lesson\")\n\nfunction LessonVideo() {\n\tconsole.log(localStorage.getItem(\"token\"));\n\tdocument.title = \"Cudy Lesson\"\n\n\treturn (\n\t\t<LessonContext.Provider value={{ client: cudyLesson }}>\n\t\t\t<Layout>\n\t\t\t\t<ListVideo isSlice gqlQuery={LIST_VIDEO_LESSON} listData=\"listVideoLesson\" />\n\t\t\t\t<ListVideo\n\t\t\t\t\tisSlice\n\t\t\t\t\tgqlQuery={LIST_RECOMMENDED_FAVOURITE}\n\t\t\t\t\tlistData=\"listRecommendedVideo\"\n\t\t\t\t\theader=\"Recommended Videos\"\n\t\t\t\t\tsubHeader=\"A lot of video that is very recommended for you\"\n\t\t\t\t/>\n\t\t\t</Layout>\n\t\t</LessonContext.Provider>\n\t)\n}\nexport default LessonVideo\n\nexport const LessonContext = createContext()\n","import React, { useContext } from \"react\"\nimport { Link, useParams, useLocation } from \"react-router-dom\"\nimport { Row, Col, Divider } from \"antd\"\nimport { useQuery } from \"@apollo/react-hooks\"\nimport { LessonContext } from \"./index\"\nimport { Heading } from \"components\"\nimport { TumbVideo, Section } from \"components/common/LessonVideo\"\n\nfunction ListVideo({ header, subHeader, isSlice = false, isEnd = false, span, listData, gqlQuery, ...props }) {\n\tconst { client } = useContext(LessonContext)\n\tconst { country } = useParams()\n\n\tconst location = useLocation()\n\tconst gqlOpts = {\n\t\tclient,\n\t\tvariables: {\n\t\t\tcountry,\n\t\t\tyoutubeVideoId: props.youtubeVideoId,\n\t\t\tcurriculumPvid: parseInt(props.curriculumPvid),\n\t\t\tsubjectPvid: parseInt(props.subjectPvid),\n\t\t}\n\t}\n\tconsole.log(gqlOpts);\n\n\tconst { data, loading } = useQuery(gqlQuery, gqlOpts)\n\t// change to skaleton\n\tif (loading) {\n\t\treturn <div>This Content is loading</div>\n\t}\n\tconst linkTo = (youtubeVideoId) =>\n\t\tlocation.pathname.split(\"/\")[3] !== \"watch\" && location.pathname.split(\"/\")[3] !== \"\"\n\t\t\t? `lesson/watch?v=${youtubeVideoId}`\n\t\t\t: `watch?v=${youtubeVideoId}`\n\n\treturn (\n\t\t<Section>\n\t\t\t<Row gutter={[24, 24]}>\n\t\t\t\t{!!header && (\n\t\t\t\t\t<Col span={24}>\n\t\t\t\t\t\t<Heading content={header} subheader={subHeader} />\n\t\t\t\t\t</Col>\n\t\t\t\t)}\n\n\t\t\t\t{/* Check if slice  */}\n\t\t\t\t{isSlice &&\n\t\t\t\t\tdata[listData].slice(0, 8).map((video) => (\n\t\t\t\t\t\t<Col span={!!span ? 24 : 6}>\n\t\t\t\t\t\t\t<Link to={() => linkTo(video.youtubeVideoId)}>\n\t\t\t\t\t\t\t\t<TumbVideo data={video} />\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\n\t\t\t\t{/* if not slice */}\n\t\t\t\t{!isSlice &&\n\t\t\t\t\tdata[listData].map((video) => (\n\t\t\t\t\t\t<Col span={!!span ? 24 : 6}>\n\t\t\t\t\t\t\t<Link to={() => linkTo(video.youtubeVideoId)}>\n\t\t\t\t\t\t\t\t<TumbVideo data={video} />\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\n\t\t\t\t{/*if is end don't have hr */}\n\t\t\t\t{!isEnd && (\n\t\t\t\t\t<Col span={24}>\n\t\t\t\t\t\t<Divider style={{ height: \"5px\" }} />\n\t\t\t\t\t</Col>\n\t\t\t\t)}\n\t\t\t</Row>\n\t\t</Section>\n\t)\n}\n\nexport default ListVideo\n","import { gql } from \"apollo-boost\"\n\nexport const LIST_VIDEO_LESSON = gql`\n\tquery LIST_VIDEO_LESSON($country: String!) {\n\t\tlistVideoLesson(country: $country) {\n\t\t\tpvid\n\t\t\tyoutubeVideoId\n\t\t\ttitle\n\t\t\tcurriculumName\n\t\t\tsubjectName\n\t\t\tdescription\n\t\t\tduration\n\t\t\tyoutubeLink\n\t\t\tembedLink\n\t\t\tchannelId\n\t\t\tchannelTitle\n\t\t\tchannelLink\n\t\t\tpublishedAt\n\t\t\tthumbnail\n\t\t\tcountry\n\t\t\tcreatedAt\n\t\t}\n\t}\n`\n\nexport const LIST_RECOMMENDED_FAVOURITE = gql`\n\tquery LIST_RECOMMENDED_FAVOURITE($country: String!) {\n\t\tlistRecommendedVideo(country: $country) {\n\t\t\tpvid\n\t\t\tyoutubeVideoId\n\t\t\ttitle\n\t\t\tcurriculumName\n\t\t\tsubjectName\n\t\t\tdescription\n\t\t\tduration\n\t\t\tyoutubeLink\n\t\t\tembedLink\n\t\t\tchannelId\n\t\t\tchannelTitle\n\t\t\tchannelLink\n\t\t\tpublishedAt\n\t\t\tthumbnail\n\t\t\tcountry\n\t\t\tcreatedAt\n\t\t}\n\t}\n`\n\nexport const LIST_ANOTHER_VIDEO = gql`\n\tquery LIST_ANOTHER_VIDEO($youtubeVideoId: String!, $country: String!, $curriculumPvid: Int!, $subjectPvid: Int!) {\n\t\tlistAnotherVideo(youtubeVideoId: $youtubeVideoId, country: $country, curriculumPvid: $curriculumPvid, subjectPvid: $subjectPvid) {\n\t\t\tpvid\n\t\t\tyoutubeVideoId\n\t\t\ttitle\n\t\t\tcurriculumName\n\t\t\tsubjectName\n\t\t\tdescription\n\t\t\tduration\n\t\t\tyoutubeLink\n\t\t\tembedLink\n\t\t\tchannelId\n\t\t\tchannelTitle\n\t\t\tchannelLink\n\t\t\tpublishedAt\n\t\t\tthumbnail\n\t\t\tcountry\n\t\t\tcreatedAt\n\t\t}\n\t}\n`\nexport const DETAIL_VIDEO_LESSON = gql`\n\tquery DETAIL_VIDEO_LESSON($youtubeVideoId: String!) {\n\t\tdetailVideoLesson(youtubeVideoId: $youtubeVideoId) {\n\t\t\tpvid\n\t\t\tyoutubeVideoId\n\t\t\ttitle\n\t\t\tcurriculumName\n\t\t\tsubjectName\n\t\t\tdescription\n\t\t\tduration\n\t\t\tyoutubeLink\n\t\t\tembedLink\n\t\t\tchannelId\n\t\t\tchannelTitle\n\t\t\tchannelLink\n\t\t\tpublishedAt\n\t\t\tthumbnail\n\t\t\tcountry\n\t\t\tcreatedAt\n\t\t\tfavourite\n\t\t\tcurriculumPvid\n\t\t\tsubjectPvid\n\t\t\tcomments {\n\t\t\t\tpvid\n\t\t\t\tcomment\n\t\t\t\tcountReplied\n\t\t\t\tcreatedAt\n\t\t\t\tuser {\n\t\t\t\t\tuserPvid\n\t\t\t\t\ttoken\n\t\t\t\t\temail\n\t\t\t\t\tcountry\n\t\t\t\t\tfirstName\n\t\t\t\t\tlastName\n\t\t\t\t\tresource {\n\t\t\t\t\t\tpath\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`\n"],"sourceRoot":""}